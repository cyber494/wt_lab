const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const PORT = 3000;

app.use(bodyParser.json());

let books = [], idCounter = 1;

const validateBook = ({ title, author, year }) => {
  if (!title || typeof title !== 'string') return 'Title must be a string.';
  if (!author || typeof author !== 'string') return 'Author must be a string.';
  if (!year || typeof year !== 'number') return 'Year must be a number.';
  return null;
};

// CRUD Endpoints
app.post('/books', (req, res) => {
  const error = validateBook(req.body);
  if (error) return res.status(400).json({ error });

  const newBook = { id: idCounter++, ...req.body };
  books.push(newBook);
  res.status(201).json(newBook);
});

app.get('/books', (_, res) => res.json(books));

app.route('/books/:id')
  .get((req, res) => {
    const book = books.find(b => b.id === +req.params.id);
    book ? res.json(book) : res.status(404).json({ error: 'Book not found' });
  })
  .put((req, res) => {
    const book = books.find(b => b.id === +req.params.id);
    if (!book) return res.status(404).json({ error: 'Book not found' });

    const error = validateBook(req.body);
    if (error) return res.status(400).json({ error });

    Object.assign(book, req.body);
    res.json(book);
  })
  .delete((req, res) => {
    const index = books.findIndex(b => b.id === +req.params.id);
    if (index === -1) return res.status(404).json({ error: 'Book not found' });

    books.splice(index, 1);
    res.status(204).send();
  });

app.use((_, res) => res.status(404).json({ error: 'Route not found' }));

app.listen(PORT, () => console.log(`Server is running on http://localhost:${PORT}`));